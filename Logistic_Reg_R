library(tidyverse)
Diabetes <- read.table("Diabetes.txt", header = T)

Diabetes <- Diabetes %>%
  filter(glucose != 0) %>%
  filter(diastolic != 0) %>%
  filter(triceps != 0) %>%
  filter(insulin != 0) %>%
  filter(bmi != 0) %>%
  filter(age != 0)

best_lm <- bestglm::bestglm(as.data.frame(Diabetes), family = binomial, IC="AIC", method="exhaustive")

summary(best_lm)

best_lm <- glm(diabetes ~ pregnant + glucose + bmi + pedigree + age, data = Diabetes, family = binomial)


ggplot(data = Diabetes %>% filter(age < 90), mapping = aes(x = age, y = diabetes)) +
  geom_point() +
  geom_jitter(width=.25, height = .1) +
  geom_smooth(se = F, method = "gam")

# Question 5 --------------------------------------------------------------

(confint(best_lm))

# Question 6 ------------------------------------------------

library(pROC)

pred.probs <- predict.glm(best_lm, type="response")

my.roc <- roc(Diabetes$diabetes, pred.probs)

ggplot() +
  geom_line(aes(x=1-my.roc[["specificities"]], y=my.roc[["sensitivities"]])) +
  geom_abline(intercept=0, slope=1) +
  labs(x = "1 - Specificity",
       y = "Sensitivity")



auc(my.roc)
# area under the curve, determines how well I do at predicting correctly

# first: predicted probabilities
auc(my.roc)

# second: potential thresholds (or cutoff values)
thresh <- seq(from=0, to=1, length=1000)

# third: evaluate each threshold and how it does in misclassification rate
misclass <- rep(NA,length=length(thresh)) #Empty vector to hold misclassification rates
for(i in 1:length(thresh)) {
  #If probability greater than threshold then 1 else 0
  my.classification <- ifelse(pred.probs>thresh[i], 1, 0)
  
  # calculate the pct where my classification not eq truth
  misclass[i] <- mean(my.classification != Diabetes$diabetes)
}
#Find threshold which minimizes mis-classification
best.thresh <- thresh[which.min(misclass)]

plot(thresh, misclass, "l", main = "Proportion of Missclassifications per Potential Threshold", xlab = "Threshold", ylab = "Missclassification Proportion")

# Question 7 --------------------------------------------------------------


best.class <- ifelse(pred.probs>best.thresh, 1, 0)

main_conf_mat <- addmargins(table(Diabetes$diabetes, best.class))
# row values are true values, columns are predictions

sens <- main_conf_mat[2,2]/main_conf_mat[2,3]
spec <- main_conf_mat[1,1]/main_conf_mat[1,3]
ppv <- main_conf_mat[2,2]/main_conf_mat[3,2]
npv <- main_conf_mat[1,1]/main_conf_mat[3,1]
acc <- (main_conf_mat[1,1] + main_conf_mat[2,2])/main_conf_mat[3,3]
list(sens, spec, ppv, npv)
mean(c(sens,spec,ppv,npv))

auc(my.roc)


# 7 Cross Validation --------------------------------------------------------

## Choose number of CV studies to run in a loop & test set size
n.cv <- 100
n.test <- round(.1*nrow(Diabetes))

## Set my threshold for classifying
cutoff <- best.thresh

## Initialize matrices to hold CV results
sens <- rep(NA, n.cv)
spec <- rep(NA, n.cv)
ppv <- rep(NA, n.cv)
npv <- rep(NA, n.cv)
correct <- rep(NA, n.cv)
auc <- rep(NA, n.cv)

## Begin for loop
for(cv in 1:n.cv){
  ## Separate into test and training sets
  test.obs <- sample(1:nrow(Diabetes), n.test)
  
  # Split data into test and training sets
  test.set <- Diabetes[test.obs,]
  train.set <- Diabetes[-test.obs,]
  
  ## Fit best model to training set
  train.model <- glm(diabetes~pregnant + glucose + bmi + pedigree + age, data=train.set, family=binomial)
  
  ## Use fitted model to predict test set
  pred.probs <- predict.glm(train.model,newdata=test.set, type="response") #response gives probabilities
  
  ## Classify according to threshold
  test.class <- ifelse(pred.probs>cutoff, 1, 0)
  
  ## Create a confusion matrix
  conf.mat <- addmargins(table(factor(test.set$diabetes), factor(test.class)))
  
  ## Pull of sensitivity, specificity, PPV and NPV using bracket notation
  sens[cv] <- conf.mat[2,2]/conf.mat[2,3]
  spec[cv] <- conf.mat[1,1]/conf.mat[1,3]
  ppv[cv] <- conf.mat[2,2]/conf.mat[3,2]
  npv[cv] <- conf.mat[1,1]/conf.mat[3,1]
  correct[cv] <- (conf.mat[1,1] + conf.mat[2,2])/conf.mat[3,3]
  
  ## Calculate AUC
  auc[cv] <- auc(roc(test.set$diabetes, pred.probs))
} #End for-loop

conf.mat
list(mean(sens),mean(spec),mean(ppv),mean(npv), mean(auc))
mean(correct)

# Question 9 --------------------------------------------------------------


Preds <- data.frame(pregnant= 1, glucose= 90, diastolic=62, triceps= 18, insulin= 59, bmi= 25.1, pedigree= 1.268, age= 25)

# Log odds prediction
pred.log.odds <- predict.glm(best_lm, newdata = Preds)

# Probability prediction conversion
pred.prob <- exp(pred.log.odds)/(1+exp(pred.log.odds))
#OR
pred.prob <- predict.glm(best_lm, newdata = Preds, se.fit = T, type = "response")
